

from pyfiglet import figlet_format
import pygame
from termcolor import colored
import pyfiglet
from colorama import Back, Fore, Style, init


def _user_text(plaintext, key):
    user_key = ''
    i = 0
    for char in plaintext:
        if char.isalpha():
            user_key += key[i % len(key)]
            i += 1
        else:
            user_key += ' '
    return user_key


def _encrypt_decrypt_char(PlainTextChar, KeyChar, mode='encrypt'):
    if PlainTextChar.isalpha():
        firstLetter = 'a'
        if PlainTextChar.isupper():
            firstLetter = 'A'

        old_char_position = ord(PlainTextChar) - ord(firstLetter)
        key_char_position = ord(KeyChar.lower()) - ord('a')

        if mode == 'encrypt':
            new_char_position = (old_char_position + key_char_position) % 26
        else:
            new_char_position = (old_char_position -
                                 key_char_position + 26) % 26
        return chr(new_char_position + ord(firstLetter))
    return PlainTextChar


def encrypt(plaintext, key):
    ciphertext = ''
    user_key = _user_text(plaintext, key)
    for PlainTextChar, KeyChar in zip(plaintext, user_key):
        ciphertext += _encrypt_decrypt_char(PlainTextChar, KeyChar)
    return ciphertext


def decrypt(ciphertext, key):
    plaintext = ''
    user_key = _user_text(ciphertext, key)
    for ciphertext_char, KeyChar in zip(ciphertext, user_key):
        plaintext += _encrypt_decrypt_char(ciphertext_char,
                                           KeyChar, mode='decrypt')
    return plaintext


art = figlet_format(" THE VIGENERE CIPHER", font='bubble', width=100)
c_art = colored(art, 'magenta')


for line in c_art.split("\n"):
    print(line.center(50))

print('Enter a message: ')
plaintext = input(Fore.BLUE)

print('Enter a key: ')
key = input(Fore.BLUE)

ciphertext = encrypt(plaintext, key)
decrypted_plaintext = decrypt(ciphertext, key)

print(f'Ciphertext: {ciphertext}')
print(f'Decrypted Plaintext: {decrypted_plaintext}')
